---
import { Image } from "astro:assets";

interface Props {
  linkItem: any;
  category?: boolean;
  isShort?: boolean;
}

const { linkItem, category = false, isShort = false } = Astro.props;
---

<div class:list={["devlinxItem", isShort ? "is-short" : ""]}>
  {
    linkItem.data.image && !linkItem.data.icon && (
      <div class="devlinxItem__icon as-image">
        <Image src={linkItem.data.image} inferSize alt="" />
      </div>
    )
  }

  {
    linkItem.data.icon && !linkItem.data.image && (
      <div class="devlinxItem__icon as-icon" set:html={linkItem.data.icon} />
    )
  }

  <div class="devlinxItem__name">
    <a class="_link" href={linkItem.data.href} title={isShort ? linkItem.data.description : ''}>{linkItem.data.name}</a>
  </div>

  {
    !isShort && (
      <p class="devlinxItem__description">{linkItem.data.description}</p>
    )
  }
</div>

<style lang="scss" is:global>
  .devlinxItem {
    display: grid;
    grid-template-columns: 4rem minmax(0, 1fr);
    grid-template-areas: "icon name" "icon description";
    align-items: start;
    column-gap: 1rem;

    &.is-short {
      justify-self: center;
      display: inline-grid;
      grid-template-columns: 100%;
      grid-template-areas: "icon" "name";
      justify-items: center;
      align-content: start;
      gap: 0.5rem;
    }

    &__icon {
      grid-area: icon;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 64px;
      height: 64px;
      color: var(--app-color-text-primary);
      font-size: 4rem;

      svg {
        height: 100%;
      }

      img {
        width: fit-content;
        height: fit-content;
        max-width: 100%;
      }

      &.as-text {
        font-family: var(--app-font-family-primary);
        font-weight: 800;
      }
    }

    &__name {
      grid-area: name;
      display: flex;
      align-items: center;
      gap: 1rem;
      font-family: var(--app-font-family-primary);
      font-size: 2rem;

      .is-short & {
        font-size: 1rem;
        text-align: center;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
        overflow: hidden;
      }
    }

    &__description {
      grid-area: description;
      color: var(--app-color-text-secondary);
      font-family: monospace;
      font-size: 1rem;
      text-wrap: balance;
    }

    ._link {
      color: inherit;
      text-decoration: none;
      cursor: pointer;
    }

    &.is-short ._link {
      &:hover {
        text-decoration: underline;
      }
    }

    &:not(.is-short) ._link {
      &:hover {
        &::after {
          content: "_";
          animation: blink 1.5s infinite both;
        }
      }
    }
  }
</style>
